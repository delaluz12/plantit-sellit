{"version":3,"sources":["utils/helpers.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Shop.js","pages/Dashboard.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","products","cartOpen","cart","product","map","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","price","quantity","className","to","alt","src","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","getProfile","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Shop","Dashboard","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.61a6ad5d.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const [state, dispatch] = useStoreContext();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    const token = this.getProfile();\n    console.log(token);\n\n    if(token.data.role === \"admin\") {\n      window.location.assign('/dashboard');\n    }else {\n      window.location.assign('/');\n    }\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_51K0BxZKLr0iD6VeBK9jLkCn1oalSRd6CSIoOJaXXF9Qlx8ScXKDm2NpARCSD0muwsObIgaLX2kIfPB8CdPRn3jEb005EXOkxIX');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <h1>PJ's new landing page goes here.</h1>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Shop = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Shop;\n","import React from \"react\";\n\n\nconst Dashboard = () => {\n  return (\n    <div className=\"container\">\n        <h1>This is the dashboard!</h1>\n    </div>\n  );\n};\n\nexport default Dashboard;","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/shop\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $state: String\n\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n      state: $state\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n        state:\"static\"\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/shop\">\n              Shop\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/shop\">\n              Shop\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          {/* <span role=\"img\" aria-label=\"shopping bag\">🛍️</span> */}\n          Plant It - Sell It\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Shop from './pages/Shop';\nimport Dashboard from './pages/Dashboard'\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/shop\" component={Shop} />              \n              <Route exact path=\"/dashboard\" component={Dashboard} />              \n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}